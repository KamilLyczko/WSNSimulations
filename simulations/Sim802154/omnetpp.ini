[General]
network = Sim802154

# network topology settings
*.distFromSensorToSink = 50m
*.distFromServerToSink = 30m

# simulation time settings
sim-time-limit=1000s

# visualisations configuration
*.enableVisualisation = false

# statistics collection:
# packetSent, packetReceived, residualEnergyCapacity and endToEndDelay values registered when event occurs (packet is sent or received)
# outgoingDataRate and throughput values are registered in 0.1s intervals
#*.sensor*.udp.packetSent:vector(packetBytes).vector-recording = true
*.server.udp.packetReceived:vector(packetBytes).vector-recording = true
*.gateway.eth[0].queue.outgoingDataRate:vector.vector-recording = true
#*.sensorType*[0].wlan[0].queue.outgoingDataRate:vector.vector-recording = true
#**.energyStorage.residualEnergyCapacity:vector.vector-recording = true
*.server.app[0].endToEndDelay:vector.vector-recording = true
*.server.app[0].throughput:vector.vector-recording = true
**.vector-recording = false
**.scalar-recording = false
**.param-recording = false

# misc settings
**.arp.typename = "GlobalArp"
**.netmaskRoutes = ""
*.gateway.forwarding = true
*.radioMedium.backgroundNoise.power = -110dBm
#**.crcMode = "computed"
#**.fcsMode = "computed"

# routes settings
*.configurator.config = xmldoc("topology.xml")
*.configurator.addStaticRoutes = false



#*.gateway.wlan[0].radio.displayCommunicationRange = true
#*.visualizer.mediumVisualizer.displaySignals = true
#*.visualizer.networkRouteVisualizer.displayRoutes = true

# pcap recorder settings
#*.server.numPcapRecorders = 1
#*.server.pcapRecorder[*].pcapFile = "results/server.pcap"
#*.gateway.numPcapRecorders = 1
#*.gateway.pcapRecorder[*].moduleNamePatterns = "wlan[*]"
#*.gateway.pcapRecorder[*].pcapFile = "results/gateway.pcap"

# nodes position restrictions configuration
**.mobility.constraintAreaMaxX = 500m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMaxY = 400m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.initFromDisplayString = false

# energy consumption simulation:
#*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"
#*.sensor*.wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
#*.gateway.energyStorage.typename = "IdealEpEnergyStorage"
#*.gateway.wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"

# visualizer
*.visualizer.*.routingTableVisualizer.displayRoutingTables = false
*.visualizer.*.routingTableVisualizer.displayRoutesIndividually = false
*.visualizer.*.routingTableVisualizer.lineShift = 0
*.visualizer.*.routingTableVisualizer.displayLabels = false

*.visualizer.*.infoVisualizer.modules = "*.server.app[0]"
*.visualizer.*.infoVisualizer.format = "%t"

# sensors apps configuration

# Zigbee max app.messageLength:
# max APS message no security: 100 bytes (MAC payload (116) - NWK layer header (8) - APS layer header (8) = 100)
# max APS message with network security: 82 bytes (MAC payload (116) – NWK layer header (8) – NWK security framing (18) – APS layer header (8) = 82)
# https://community.silabs.com/s/article/what-is-the-maximum-zigbee-message-payload-length-in-secure-and-non-secure-modes?language=en_US


[Config Sim802154_app1]
result-dir = "results/Sim802154_app1"
sim-time-limit=3600s

*.sensorsTotalNumber = ${N=5..20 step 1}
*.sensorsType1Number = int(floor(0.5*sensorsTotalNumber))
*.sensorsType2Number = int(floor(0.3*sensorsTotalNumber))
*.sensorsType3Number = sensorsTotalNumber - (sensorsType1Number + sensorsType2Number)
*.distFromSensorToSink = 50m
*.distFromServerToSink = 30m

*.sensorType1*.numApps = 1
*.sensorType1*.app[*].typename = "UdpBasicApp"
*.sensorType1*.app[*].destAddresses = "server"
*.sensorType1*.app[*].destPort = 1000
*.sensorType1*.app[*].sendInterval = 1s
*.sensorType1*.app[*].startTime = exponential(1s)
*.sensorType1*.app[*].messageLength = 25Byte # + 8Byte UDP Header
*.sensorType1*.app[*].packetName = "Type1SensorData"

*.sensorType2*.numApps = 1
*.sensorType2*.app[*].typename = "UdpBasicApp"
*.sensorType2*.app[*].destAddresses = "server"
*.sensorType2*.app[*].destPort = 1000
*.sensorType2*.app[*].sendInterval = uniform(0.2s,0.5s)
*.sensorType2*.app[*].startTime = exponential(1s)
*.sensorType2*.app[*].messageLength = 10Byte # + 8Byte UDP Header
*.sensorType2*.app[*].packetName = "Type2SensorData"

*.sensorType3*.numApps = 1
*.sensorType3*.app[*].typename = "UdpBasicApp"
*.sensorType3*.app[*].destAddresses = "server"
*.sensorType3*.app[*].destPort = 1000
*.sensorType3*.app[*].sendInterval = 5s
*.sensorType3*.app[*].startTime = exponential(1s)
*.sensorType3*.app[*].messageLength = 40Byte # + 8Byte UDP Header
*.sensorType3*.app[*].packetName = "Type3SensorData"

*.server.numApps = 1
*.server.app[0].typename = "UdpSink"
*.server.app[0].localPort = 1000

[Config Sim802154_app2]
# sensory typu 1 przesy³aj¹ dane regularnie co 0.2s - od 20 do 30 B
# sensory typu 2 przesy³aj¹ dane z przerwami - serie po 1.5s z przerwami od 10 do 12 s pomiêdzy 
# 		(seria to pakiety 55 do 65 B wysy³ane co 0.1s) - 15 pakietów
# sensory typu 3 przesy³aj¹ dane z przerwami - serie po 3s z przerwami 7s pomiêdzy 
# 		(seria to pakiety 40B wysy³ane co 0.1-0.3s)

result-dir = "results/Sim802154_app2"
sim-time-limit=3600s

*.sensorsTotalNumber = ${N=5..20 step 1}
*.sensorsType1Number = int(floor(0.5*sensorsTotalNumber))
*.sensorsType2Number = int(floor(0.3*sensorsTotalNumber))
*.sensorsType3Number = sensorsTotalNumber - (sensorsType1Number + sensorsType2Number)
*.distFromSensorToSink = 50m
*.distFromServerToSink = 30m

*.sensorType1*.numApps = 1
*.sensorType1*.app[*].typename = "UdpBasicApp"
*.sensorType1*.app[*].destAddresses = "server"
*.sensorType1*.app[*].destPort = 1000
*.sensorType1*.app[*].sendInterval = 0.2s
*.sensorType1*.app[*].startTime = exponential(1s)
*.sensorType1*.app[*].messageLength = 25Byte + intuniform(-6Byte, 6Byte) # + 8Byte UDP Header
*.sensorType1*.app[*].packetName = "Type1SensorData"

*.sensorType2*.numApps = 1
*.sensorType2*.app[*].typename = "UdpBasicBurst"
*.sensorType2*.app[*].destAddresses = "server"
*.sensorType2*.app[*].destPort = 1000
*.sensorType2*.app[*].startTime = exponential(1s)
*.sensorType2*.app[*].sendInterval = 0.1s
*.sensorType2*.app[*].burstDuration = 1.5s #node sends 15 packets and goes to sleep
*.sensorType2*.app[*].sleepDuration = uniform(10s, 12s)
*.sensorType2*.app[*].messageLength = 60Byte + intuniform(-6Byte, 6Byte)# + 8Byte UDP Header
*.sensorType2*.app[*].packetName = "Type2SensorData"
*.sensorType2*.app[*].chooseDestAddrMode = "once"

*.sensorType3*.numApps = 1
*.sensorType3*.app[*].typename = "UdpBasicApp"
*.sensorType3*.app[*].destAddresses = "server"
*.sensorType3*.app[*].destPort = 1000
*.sensorType3*.app[*].startTime = exponential(1s)
*.sensorType3*.app[*].sendInterval = uniform(0.1s, 0.3s)
*.sensorType3*.app[*].burstDuration = 3s #node sends 15 packets and goes to sleep
*.sensorType3*.app[*].sleepDuration = 7s
*.sensorType3*.app[*].messageLength = 40Byte # + 8Byte UDP Header
*.sensorType3*.app[*].packetName = "Type3SensorData"
*.sensorType3*.app[*].chooseDestAddrMode = "once"

*.server.numApps = 1
*.server.app[0].typename = "UdpSink"
*.server.app[0].localPort = 1000


[Config Sim802154_app3]
# sensory typu 1 przesy³aj¹ dane z przerwami - serie po 1.5s z przerwami 4s pomiêdzy 
# 		(seria to pakiety 24 do 26 B wysy³ane co 0.1s) - 15 pakietów
# sensory typu 2 przesy³aj¹ dane z przerwami - serie po 1.5s z przerwami od 10 do 12 s pomiêdzy 
# 		(seria to pakiety 55 do 65 B wysy³ane co 0.1s) - 15 pakietów
# sensory typu 3 przesy³aj¹ dane z przerwami - serie po 3s z przerwami 7s pomiêdzy 
# 		(seria to pakiety 40B wysy³ane co 0.1-0.3s)

result-dir = "results/Sim802154_app3"
sim-time-limit=3600s

*.sensorsTotalNumber = ${N=5..20 step 1}
*.sensorsType1Number = int(floor(0.5*sensorsTotalNumber))
*.sensorsType2Number = int(floor(0.3*sensorsTotalNumber))
*.sensorsType3Number = sensorsTotalNumber - (sensorsType1Number + sensorsType2Number)
*.distFromSensorToSink = 50m
*.distFromServerToSink = 30m

*.sensorType1*.numApps = 1
*.sensorType1*.app[*].typename = "UdpBasicBurst"
*.sensorType1*.app[*].destAddresses = "server"
*.sensorType1*.app[*].destPort = 1000
*.sensorType1*.app[*].startTime = exponential(1s)
*.sensorType1*.app[*].sendInterval = 0.1s
*.sensorType1*.app[*].burstDuration = 1.5s #node sends 15 packets and goes to sleep
*.sensorType1*.app[*].sleepDuration = 4s
*.sensorType1*.app[*].messageLength = 25Byte + intuniform(-2Byte, 2Byte) # + 8Byte UDP Header
*.sensorType1*.app[*].packetName = "Type1SensorData"
*.sensorType1*.app[*].chooseDestAddrMode = "once"

*.sensorType2*.numApps = 1
*.sensorType2*.app[*].typename = "UdpBasicBurst"
*.sensorType2*.app[*].destAddresses = "server"
*.sensorType2*.app[*].destPort = 1000
*.sensorType2*.app[*].startTime = exponential(1s)
*.sensorType2*.app[*].sendInterval = 0.1s
*.sensorType2*.app[*].burstDuration = 1.5s #node sends 15 packets and goes to sleep
*.sensorType2*.app[*].sleepDuration = uniform(10s, 12s)
*.sensorType2*.app[*].messageLength = 60Byte + intuniform(-6Byte, 6Byte)# + 8Byte UDP Header
*.sensorType2*.app[*].packetName = "Type2SensorData"
*.sensorType2*.app[*].chooseDestAddrMode = "once"

*.sensorType3*.numApps = 1
*.sensorType3*.app[*].typename = "UdpBasicApp"
*.sensorType3*.app[*].destAddresses = "server"
*.sensorType3*.app[*].destPort = 1000
*.sensorType3*.app[*].startTime = exponential(1s)
*.sensorType3*.app[*].sendInterval = uniform(0.1s, 0.3s)
*.sensorType3*.app[*].burstDuration = 3s #node sends 15 packets and goes to sleep
*.sensorType3*.app[*].sleepDuration = 7s
*.sensorType3*.app[*].messageLength = 40Byte # + 8Byte UDP Header
*.sensorType3*.app[*].packetName = "Type3SensorData"
*.sensorType3*.app[*].chooseDestAddrMode = "once"

*.server.numApps = 1
*.server.app[0].typename = "UdpSink"
*.server.app[0].localPort = 1000

[Config Sim802154_app4]

result-dir = "results/Sim802154_app4"
sim-time-limit=3600s

*.sensorsTotalNumber = ${N=5..20 step 1}
*.sensorsType1Number = int(floor(0.5*sensorsTotalNumber))
*.sensorsType2Number = int(floor(0.3*sensorsTotalNumber))
*.sensorsType3Number = sensorsTotalNumber - (sensorsType1Number + sensorsType2Number)
*.distFromSensorToSink = 50m
*.distFromServerToSink = 30m

*.sensorType1*.numApps = 1
*.sensorType1*.app[*].typename = "UdpBasicBurst"
*.sensorType1*.app[*].destAddresses = "server"
*.sensorType1*.app[*].destPort = 1000
*.sensorType1*.app[*].startTime = exponential(1s)
*.sensorType1*.app[*].sendInterval = 0.1s
*.sensorType1*.app[*].burstDuration = 4s
*.sensorType1*.app[*].sleepDuration = 4s
*.sensorType1*.app[*].messageLength = intuniform(44Byte, 51Byte) # + 8Byte UDP Header
*.sensorType1*.app[*].packetName = "Type1SensorData"
*.sensorType1*.app[*].chooseDestAddrMode = "once"

*.sensorType2*.numApps = 1
*.sensorType2*.app[*].typename = "UdpBasicBurst"
*.sensorType2*.app[*].destAddresses = "server"
*.sensorType2*.app[*].destPort = 1000
*.sensorType2*.app[*].startTime = exponential(1s)
*.sensorType2*.app[*].sendInterval = 0.1s
*.sensorType2*.app[*].burstDuration = 20s
*.sensorType2*.app[*].sleepDuration = uniform(10s, 12s)
*.sensorType2*.app[*].messageLength = intuniform(44Byte, 51Byte)# + 8Byte UDP Header
*.sensorType2*.app[*].packetName = "Type2SensorData"
*.sensorType2*.app[*].chooseDestAddrMode = "once"

*.sensorType3*.numApps = 1
*.sensorType3*.app[*].typename = "UdpBasicBurst"
*.sensorType3*.app[*].destAddresses = "server"
*.sensorType3*.app[*].destPort = 1000
*.sensorType3*.app[*].startTime = exponential(1s)
*.sensorType3*.app[*].sendInterval = uniform(0.1s, 0.3s)
*.sensorType3*.app[*].burstDuration = 3s
*.sensorType3*.app[*].sleepDuration = 7s
*.sensorType3*.app[*].messageLength = intuniform(44Byte, 51Byte) # + 8Byte UDP Header
*.sensorType3*.app[*].packetName = "Type3SensorData"
*.sensorType3*.app[*].chooseDestAddrMode = "once"

*.server.numApps = 1
*.server.app[0].typename = "UdpSink"
*.server.app[0].localPort = 1000


