[General]
network = SimMAC

# network topology settings
*.sensorsType1Number = int(floor(0.5*sensorsTotalNumber))
*.sensorsType2Number = int(floor(0.3*sensorsTotalNumber))
*.sensorsType3Number = sensorsTotalNumber - (sensorsType1Number + sensorsType2Number)
*.distFromSensorToSink = 50m
*.distFromServerToSink = 30m

# simulation time settings
sim-time-limit=100s

# visualisations configuration
*.enableVisualisation = false

# statistics collection:
# packetSent, packetReceived, residualEnergyCapacity and endToEndDelay values registered when event occurs (packet is sent or received)
# outgoingDataRate and throughput values are registered in 0.1s intervals
*.sensor*.udp.packetSent:vector(packetBytes).vector-recording = true
*.server.udp.packetReceived:vector(packetBytes).vector-recording = true
*.gateway.eth[0].queue.outgoingDataRate:vector.vector-recording = true
*.sensorType*[0].wlan[0].queue.outgoingDataRate:vector.vector-recording = true
**.energyStorage.residualEnergyCapacity:vector.vector-recording = true
*.server.app[0].endToEndDelay:vector.vector-recording = true
*.server.app[0].throughput:vector.vector-recording = true
**.vector-recording = false
*.server.udp.packetReceived:count.scalar-recording = true
*.sensor*.udp.packetSent:count.scalar-recording = true
**.residualEnergyCapacity:last.scalar-recording = true
**.scalar-recording = false
**.param-recording = false

# wireless interface
**.wlan[*].typename = "WirelessInterface"
**.wlan[*].radio.typename = "ApskScalarRadio"

**.arp.typename = "GlobalArp"
**.netmaskRoutes = ""
*.gateway.forwarding = true
**.maxTransmissionDuration = 100ms

# routes settings
*.configurator.config = xmldoc("topology.xml")
*.configurator.addStaticRoutes = false
#*.configurator.dumpConfig = "dump_test.xml"

#*.gateway.wlan[0].radio.displayCommunicationRange = true
#*.visualizer.mediumVisualizer.displaySignals = true
#*.visualizer.networkRouteVisualizer.displayRoutes = true

# pcap recorder settings
#**.crcMode = "computed"
#**.fcsMode = "computed"
#*.server.numPcapRecorders = 1
#*.server.pcapRecorder[*].pcapFile = "results/server.pcap"
#*.gateway.numPcapRecorders = 1
#*.gateway.pcapRecorder[*].moduleNamePatterns = "wlan[*]"
#*.gateway.pcapRecorder[*].pcapFile = "results/gateway.pcap"

# nodes position restrictions configuration
**.mobility.constraintAreaMaxX = 500m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMaxY = 400m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.initFromDisplayString = false

# radio and radioMedium
**.radio.centerFrequency = 2.45GHz
**.radio.bandwidth = 2.8MHz
**.radio.transmitter.bitrate = 19200 bps
**.radio.transmitter.headerLength = 8b
**.radio.transmitter.preambleDuration = 0.0001s
**.radio.transmitter.power = 2.24mW
**.radio.receiver.energyDetection = -90dBm
**.radio.receiver.sensitivity = -100dBm
**.radio.receiver.snirThreshold = -8dB
*.radioMedium.backgroundNoise.power = -110dBm

#**.wlan[*].mac.headerLength = 8b


# visualizer
*.visualizer.*.routingTableVisualizer.displayRoutingTables = false
*.visualizer.*.routingTableVisualizer.displayRoutesIndividually = false
*.visualizer.*.routingTableVisualizer.lineShift = 0
*.visualizer.*.routingTableVisualizer.displayLabels = false

*.visualizer.*.infoVisualizer.modules = "*.server.app[0]"
*.visualizer.*.infoVisualizer.format = "%t"

#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
#*.visualizer.*.physicalLinkVisualizer.displayLinks = true

# sensors apps configuration

# Zigbee max app.messageLength:
# max APS message no security: 100 bytes (MAC payload (116) - NWK layer header (8) - APS layer header (8) = 100)
# max APS message with network security: 82 bytes (MAC payload (116) – NWK layer header (8) – NWK security framing (18) – APS layer header (8) = 82)
# https://community.silabs.com/s/article/what-is-the-maximum-zigbee-message-payload-length-in-secure-and-non-secure-modes?language=en_US

*.sensorType1*.numApps = 1
*.sensorType1*.app[*].typename = "UdpBasicApp"
*.sensorType1*.app[*].destAddresses = "server"
*.sensorType1*.app[*].destPort = 1000
*.sensorType1*.app[*].sendInterval = 1s
*.sensorType1*.app[*].startTime = exponential(1s)
*.sensorType1*.app[*].messageLength = 25Byte # + 8Byte UDP Header
*.sensorType1*.app[*].packetName = "Type1SensorData"

*.sensorType2*.numApps = 1
*.sensorType2*.app[*].typename = "UdpBasicApp"
*.sensorType2*.app[*].destAddresses = "server"
*.sensorType2*.app[*].destPort = 1000
*.sensorType2*.app[*].sendInterval = uniform(0.2s,0.5s)
*.sensorType2*.app[*].startTime = exponential(1s)
*.sensorType2*.app[*].messageLength = 10Byte # + 8Byte UDP Header
*.sensorType2*.app[*].packetName = "Type2SensorData"

*.sensorType3*.numApps = 1
*.sensorType3*.app[*].typename = "UdpBasicApp"
*.sensorType3*.app[*].destAddresses = "server"
*.sensorType3*.app[*].destPort = 1000
*.sensorType3*.app[*].sendInterval = 5s
*.sensorType3*.app[*].startTime = exponential(1s)
*.sensorType3*.app[*].messageLength = 40Byte # + 8Byte UDP Header
*.sensorType3*.app[*].packetName = "Type3SensorData"

*.server.numApps = 1
*.server.app[0].typename = "UdpSink"
*.server.app[0].localPort = 1000

# testy:
# procent dostarczonych pakietów udp i zu¿ycie energii (suma sensorów i sinka) w zale¿noœci od liczby slotów dla LMAC
# procent dostarczonych pakietów udp i zu¿ycie energii (suma sensorów i sinka) w zale¿noœci od rozmiaru sieci (liczby sensorów) - dom. MAC
# procent dostarczonych pakietów udp i zu¿ycie energii (suma sensorów i sinka) w zale¿noœci od d³ugoœci slota - MAC
#  (dla okreœlonego rozmiaru sieci, np. 30 sensorów)
# procent dostarczonych pakietów udp i zu¿ycie energii (suma sensorów i sinka) w zale¿noœci od rozmiaru sieci (liczby sensorów) - IEEE802.15.4
# porównanie wykresów: liczby otrzymywanych pakietów i throughput na serwerze, incomingDataRate na gatewayu i outgoingDataRate na sensorach
#  (po jednym sensorze danego typu)

[Config test]
result-dir = "results/test"
sim-time-limit=10s

*.sensorsTotalNumber = 30
#**.vector-recording = true

**.wlan[*].mac.typename = "BMac"
**.wlan[*].mac.headerLength = 1B # must be a multiple of 8b (1B)
**.wlan[*].mac.slotDuration = 0.025s
**.wlan[*].queue.typename = "DropTailQueue"
**.wlan[*].queue.packetCapacity = 20


[Config NumSlotsLMAC]
result-dir = "results/NumSlotsLMAC"

*.sensorsTotalNumber = ${N=10..100 step 10}
# dla 50 sensorów: 40 slotów daje najlepsze wyniki
# dla 20 sensorów: 16 slotów daje najlepsze wyniki

**.vector-recording = false

**.wlan[*].mac.typename = "LMac"
**.wlan[*].mac.headerLength = 1B
**.mac.slotDuration = 100ms
**.mac.numSlots = ${NS=8..64 step 8}
**.mac.reservedMobileSlots = 0
**.wlan[*].queue.typename = "DropTailQueue"


[Config DefaultBMAC]
result-dir = "results/DefaultBMAC"

*.sensorsTotalNumber = ${N=10..100 step 10}

**.wlan[*].mac.typename = "BMac"
**.wlan[*].mac.headerLength = 1B
**.wlan[*].mac.slotDuration = 0.1s
**.wlan[*].queue.typename = "DropTailQueue"

[Config DefaultXMAC]
result-dir = "results/DefaultXMAC"

*.sensorsTotalNumber = ${N=10..100 step 10}

**.vector-recording = false

**.wlan[*].mac.typename = "XMac"
**.wlan[*].mac.headerLength = 80b
**.wlan[*].mac.slotDuration = 1s
**.wlan[*].queue.typename = "DropTailQueue"

[Config DefaultLMAC]
result-dir = "results/DefaultLMAC"

*.sensorsTotalNumber = ${N=10..100 step 10}

**.wlan[*].mac.typename = "LMac"
**.wlan[*].mac.headerLength = 1B
**.mac.slotDuration = 100ms
**.mac.numSlots = 64
**.mac.reservedMobileSlots = 0
**.wlan[*].queue.typename = "DropTailQueue"

[Config SlotDurationBMac]
result-dir = "results/SlotDurationBMAC"

*.sensorsTotalNumber = ${N=5..50 step 5}

**.vector-recording = false

**.wlan[*].mac.typename = "BMac"
**.wlan[*].mac.headerLength = 1B
**.wlan[*].mac.slotDuration = ${slotDuration=0.05..1 step 0.05}s
**.wlan[*].queue.typename = "DropTailQueue"
#**.wlan[*].queue.packetCapacity = 20

[Config SlotDurationXMAC]
result-dir = "results/SlotDurationXMAC"

*.sensorsTotalNumber = ${N=5..50 step 5}

**.vector-recording = false

**.wlan[*].mac.typename = "XMac"
**.wlan[*].mac.headerLength = 80b
*.gateway.wlan[*].mac.slotDuration = ${gSlotDuration=0.05..1 step 0.05}s
*.sensor*.wlan[*].mac.slotDuration = ${sSlotDuration=2.5*gSlotDuration}s
**.wlan[*].queue.typename = "DropTailQueue"
#**.wlan[*].queue.packetCapacity = 20

[Config SlotDurationLMAC_NS16]
result-dir = "results/SlotDurationLMAC/NS16"

*.sensorsTotalNumber = ${N=5..50 step 5}

**.vector-recording = false

**.wlan[*].mac.typename = "LMac"
**.wlan[*].mac.headerLength = 1B
**.mac.slotDuration = ${slotDuration=0.05..1 step 0.05}s
**.mac.numSlots = 16
**.mac.reservedMobileSlots = 0
**.wlan[*].queue.typename = "DropTailQueue"
#**.wlan[*].queue.packetCapacity = 10

[Config SlotDurationLMAC_NS64]
result-dir = "results/SlotDurationLMAC/NS64"

*.sensorsTotalNumber = ${N=5..50 step 5}

**.vector-recording = false

**.wlan[*].mac.typename = "LMac"
**.wlan[*].mac.headerLength = 1B
**.mac.slotDuration = ${slotDuration=0.05..1 step 0.05}s
**.mac.numSlots = 64
**.mac.reservedMobileSlots = 0
**.wlan[*].queue.typename = "DropTailQueue"
#**.wlan[*].queue.packetCapacity = 10


